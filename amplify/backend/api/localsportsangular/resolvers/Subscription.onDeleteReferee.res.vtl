## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )
  #set( $authMode = "userPools" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == "userPools" )
  ## [Start] Static Group Authorization Checks **
  ## Authorization rule: { allow: groups, groups: "["Admin"]" } **
  #set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get("cognito:groups"), []) )
  #set( $allowedGroups = ["Admin"] )
  #set($isStaticGroupAuthorized = $util.defaultIfNull(
                $isStaticGroupAuthorized, false))
  #foreach( $userGroup in $userGroups )
    #foreach( $allowedGroup in $allowedGroups )
      #if( $allowedGroup == $userGroup )
        #set( $isStaticGroupAuthorized = true )
      #end
    #end
  #end
  ## [End] Static Group Authorization Checks **


  ## No Owner Authorization Rules **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson(null)